/*
 * Created by Jose Fuentes on 10/12/17 16:40
 * Copyright (C) 2017
 *
 * Licensed under the Apache License, Version 2.0 (the "License"),
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'

ext {
  bintrayRepo = 'maven'
  bintrayName = 'core-legendz'

  publishedGroupId = 'com.underlegendz.core'
  libraryName = 'CoreLegendz'
  artifact = 'core-legendz'

  libraryDescription = 'Library with utils and architecture templates for all projects'

  siteUrl = 'https://github.com/ydrojen/core-legendz'
  gitUrl = 'https://github.com/ydrojen/core-legendz.git'

  libraryVersion = '1.0.0'

  developerId = 'ydrojen'
  developerName = 'Jose Fuentes'
  developerEmail = 'ydrojen@gmail.com'

  licenseName = 'The Apache Software License, Version 2.0'
  licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
  allLicenses = ["Apache-2.0"]
}

android {
  compileSdkVersion 26
  buildToolsVersion "26.0.2"
  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 26
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {}
}

// Library Versions
def androidSupportVersion = "26.1.0"
dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  testImplementation 'junit:junit:4.12'

  // Support
  implementation "com.android.support:appcompat-v7:$androidSupportVersion"
  implementation "com.android.support:design:$androidSupportVersion"

  // JobQueue
  implementation 'com.birbit:android-priority-jobqueue:2.0.1'
}

// MAVEN
apply plugin: 'com.github.dcendents.android-maven'
group = publishedGroupId
install {
  repositories.mavenInstaller {
    // This generates POM.xml with proper parameters
    pom {
      project {
        packaging 'aar'
        groupId publishedGroupId
        artifactId artifact

        // Add your description here
        name libraryName
        description libraryDescription
        url siteUrl

        // Set your license
        licenses {
          license {
            name licenseName
            url licenseUrl
          }
        }
        developers {
          developer {
            id developerId
            name developerName
            email developerEmail
          }
        }
        scm {
          connection gitUrl
          developerConnection gitUrl
          url siteUrl

        }
      }
    }
  }
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion


// JAVADOC
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}
artifacts {
  archives javadocJar
  archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")

  configurations = ['archives']
  pkg {
    repo = bintrayRepo
    name = bintrayName
    desc = libraryDescription
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = allLicenses
    publish = true
    publicDownloadNumbers = true
    version {
      desc = libraryDescription
      gpg {
        sign = true //Determines whether to GPG sign the files. The default is false
        passphrase = properties.getProperty("bintray.gpg.password")
        //Optional. The passphrase for GPG signing'
      }
    }
  }
}